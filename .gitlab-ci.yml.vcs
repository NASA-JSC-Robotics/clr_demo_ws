---
workflow:
  rules:
    # Always run on tagged commits
    - if: $CI_COMMIT_TAG
      when: always
    # Run for merge requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    # Run for commits to protected/standard development branches
    - if: '$CI_COMMIT_BRANCH == "humble" || $CI_COMMIT_BRANCH == "jazzy" || $CI_COMMIT_BRANCH =~ /.*-devel$/'
      when: always
    - when: never

stages:
  - lint
  - build-setup
  - build
  - test

pre-commit-check:
  stage: lint
  image: python:3.10
  before_script:
    - pip install pre-commit
  script:
    - pre-commit install --install-hooks
    - pre-commit run --all-files
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: always
    - if: '$CI_COMMIT_BRANCH == "humble" || $CI_COMMIT_BRANCH == "jazzy" || $CI_COMMIT_BRANCH =~ /.*-devel$/'
      when: always
    - when: never

# We need this step to setup the workspace since vcs doesn't have GitLab support
build-setup:
  stage: setup
  image:
    name: js-er-code.jsc.nasa.gov:5005/ci_build/docker_with_nasa_certs:latest
  script:
    # Ensure VCS is available
    - apk add git py3-pip
    - python3 -m venv /venv && . /venv/bin/activate
    - pip3 install vcstool
    # Ensure git is configured
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@js-er-code.jsc.nasa.gov/".insteadOf "git@js-er-code.jsc.nasa.gov:"
    # Import the workspace for the build
    - vcs import --input project.repos src/
    # For debugging purposes
    - vcs status src/
    - vcs export --exact src > exact_built.repos
  artifacts:
    paths:
      - src/
      - exact_built.repos
    expire_in: 1 week
  tags:
    - dind

# Tag the image based on either tag or branch names, depending on the run
set-tag:
  stage: setup
  script:
    - if [ -n "${CI_COMMIT_TAG}" ]; then
        echo "CONTAINER_TAG=${CI_COMMIT_TAG}" | tee -a build.env;
      else
        echo "CONTAINER_TAG=${CI_COMMIT_REF_SLUG}" | tee -a build.env;
      fi
  artifacts:
    reports:
      dotenv: build.env

build_dev_source:
  stage: build
  dependencies:
    - set-tag
  image:
    name: js-er-code.jsc.nasa.gov:5005/ci_build/docker_with_nasa_certs:latest
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - echo -e "machine js-er-code.jsc.nasa.gov\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
  script:
    - DOCKER_BUILDKIT=1 docker build
            --pull
            --cache-from ${CI_REGISTRY_IMAGE}:${CONTAINER_TAG}
            --cache-from ${CI_REGISTRY_IMAGE}:humble-devel
            -t ${CI_REGISTRY_IMAGE}:${CONTAINER_TAG}
            --target er4-dev-source
            --file Dockerfile
            .
    - docker push --all-tags ${CI_REGISTRY_IMAGE}
  tags:
    - dind

run_tests:
  stage: test
  # TODO: How can we avoid pulling this
  image:
    name: ${CI_REGISTRY_IMAGE}:${CONTAINER_TAG}
  dependencies:
    - set-tag
    - build_dev_source
  variables:
    GIT_STRATEGY: none
  script:
    # Execute from the user workspace
    - pushd ${ER4_WS} > /dev/null
    # Skip ros2_robotiq_gripper/robotiq_controllers and ros2_robotiq_gripper/robotiq_driver
    # they fail their ros2 formatting and linting tests and we're not ready to deal with that
    - colcon test --packages-skip robotiq_controllers robotiq_driver
    # Gives you easy to read summary in CI build, returns 1 in case of failures so this should
    # fail the CI job if there are issues.
    - colcon test-result --verbose
